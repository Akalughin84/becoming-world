// app.js
// üå± Becoming ‚Äî —Å–æ–∑–¥–∞–Ω–æ –ê–ª–µ–∫—Å–µ–π –ö–∞–ª—É–≥–∏–Ω, 2025
// –ù–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.
// –¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const DONATE = {
  boosty: "https://boosty.to/becoming",
  kofi: "https://ko-fi.com/becoming5036"
};

const NATURE_SOUNDS = {
  rain: "üåßÔ∏è –î–æ–∂–¥—å",
  fire: "üî• –û–≥–æ–Ω—å",
  ocean: "üåä –û–∫–µ–∞–Ω"
};

const DAILY_WORDS = ["–î—ã—à–∏", "–∑–¥–µ—Å—å", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–∏–¥–∏", "–≤–µ—Ä—å", "–±—É–¥—å"];

const GROWTH_AXES = [
  { neg: "–Ω–µ –∑–Ω–∞—é", pos: "–∑–¥–µ—Å—å", label: "–ì–ª—É–±–∏–Ω–∞" },
  { neg: "–æ–¥–∏–Ω", pos: "—Å–≤—è–∑—å", label: "–°–≤—è–∑—å" },
  { neg: "—É—Å—Ç–∞–ª", pos: "–ø–æ–∫–æ–π", label: "–≠–Ω–µ—Ä–≥–∏—è" },
  { neg: "—Å—Ç—Ä–∞—Ö", pos: "–≤–µ—Ä–∞", label: "–°–º–µ–ª–æ—Å—Ç—å" }
];

// === –õ–∏–º–∏—Ç—ã —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ===
const LIMITS = {
  letters: 20,
  dreams: 30,
  forgiveness: 20
};

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
const userData = {
  version: 1,
  wordCounts: {},
  dailyWords: [],
  letters: [],
  dreams: [],
  forgiveness: [],
  silenceMoments: [],
  visitsByTime: { morning: 0, day: 0, evening: 0, night: 0 },
  lastVisit: null
};

// === –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
function loadData() {
  try {
    const saved = localStorage.getItem('becoming_data');
    if (saved) {
      const parsed = JSON.parse(saved);
      Object.assign(userData, parsed);
      userData.dailyWords = userData.dailyWords.filter(w =>
        w.date && !isNaN(new Date(w.date).getTime())
      );
      limitArrays();
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
  }
}

function saveData() {
  try {
    localStorage.setItem('becoming_data', JSON.stringify(userData));
  } catch (e) {
    if (e.name === 'QuotaExceededError') {
      showModal("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö. –û—á–∏—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏.");
    } else {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
    }
  }
}

function limitArrays() {
  userData.letters = userData.letters.slice(-LIMITS.letters);
  userData.dreams = userData.dreams.slice(-LIMITS.dreams);
  userData.forgiveness = userData.forgiveness.slice(-LIMITS.forgiveness);
}

loadData();

// === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ===
function getTimeOfDay() {
  const hour = new Date().getHours();
  if (hour >= 5 && hour < 10) return { emoji: "üåÖ", name: "–£—Ç—Ä–æ", key: "morning" };
  if (hour >= 10 && hour < 18) return { emoji: "üå§Ô∏è", name: "–î–µ–Ω—å", key: "day" };
  if (hour >= 18 && hour < 23) return { emoji: "üåô", name: "–í–µ—á–µ—Ä", key: "evening" };
  return { emoji: "üåå", name: "–ù–æ—á—å", key: "night" };
}

// === –ê–≤—Ç–æ-—Ç–µ–º–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ===
function applyTimeTheme() {
  const hour = new Date().getHours();
  const isNight = hour >= 21 || hour < 6;
  document.body.classList.toggle('dark', isNight);
  localStorage.setItem('theme', isNight ? 'dark' : 'light');
}

// === –ì–æ–ª–æ—Å: Web Speech API ===
function speak(text, emotion = "calm") {
  if (!window.speechSynthesis) return;
  window.speechSynthesis.cancel();
  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = 'ru-RU';
  utterance.rate = 0.9;
  utterance.pitch = 0.8;

  if (emotion === "soft") {
    utterance.rate = 0.7;
    utterance.pitch = 0.7;
  } else if (emotion === "urgent") {
    utterance.rate = 1.1;
    utterance.pitch = 1.0;
  } else if (emotion === "calm") {
    utterance.rate = 0.8;
    utterance.pitch = 0.75;
  }

  window.speechSynthesis.speak(utterance);
}

// === –°–ª–æ–≤–æ –¥–Ω—è ===
function getDailyWord() {
  const today = new Date().toDateString();
  const usedToday = userData.dailyWords.filter(w =>
    new Date(w.date).toDateString() === today
  );
  if (usedToday.length > 0) return usedToday[0].word;

  const word = DAILY_WORDS[Math.floor(Math.random() * DAILY_WORDS.length)];
  userData.dailyWords.push({ word, date: new Date().toISOString() });
  saveData();
  return word;
}

// === –ü–∏—Å—å–º–æ —Å–µ–±–µ ===
function writeLetter() {
  const text = prompt("–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ —Å–µ–±–µ —á–µ—Ä–µ–∑ –≥–æ–¥:");
  if (text?.trim()) {
    userData.letters.push({
      content: text.trim(),
      timestamp: new Date().toISOString()
    });
    logWord("—Å–≤—è–∑—å");
    saveData();
    showModal("‚úâÔ∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
    speak("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", "soft");
  }
}

function viewLetters() {
  if (userData.letters.length === 0) {
    showModal("üì¨ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Å–µ–º.");
    return;
  }
  const list = userData.letters.map(l => {
    const date = new Date(l.timestamp).toLocaleDateString('ru-RU');
    return `‚úâÔ∏è ${date}\n"${l.content}"`;
  }).join("\n\n");
  showModal(`üì¨ –¢–≤–æ–∏ –ø–∏—Å—å–º–∞:\n${list}`);
}

// === –ü–∏—Å—å–º–æ –ø—Ä–æ—â–µ–Ω–∏—é ===
function showForgiveness() {
  const recipient = prompt("–ö–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–µ–±–µ, –º–∞–º–µ)") || "—Ç–æ–º—É, –∫—Ç–æ –∂–¥–∞–ª";
  const content = prompt("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–∏—Å—å–º–æ:");
  if (content?.trim()) {
    userData.forgiveness.push({
      recipient: recipient.trim(),
      text: content.trim(),
      date: new Date().toISOString()
    });
    logWord("–ø–æ–∫–æ–π");
    saveData();
    showModal("‚úÖ –¢—ã —Å–∫–∞–∑–∞–ª. –≠—Ç–æ –≤–∞–∂–Ω–æ.");
    speak("–¢—ã —Å–∫–∞–∑–∞–ª. –≠—Ç–æ –≤–∞–∂–Ω–æ.", "calm");
  }
}

function viewForgiveness() {
  if (userData.forgiveness.length === 0) {
    showModal("üì¨ –ü–∏—Å–µ–º –ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç.");
    return;
  }
  const list = userData.forgiveness.map(f => {
    const date = new Date(f.date).toLocaleDateString('ru-RU');
    return `üì¨ ${f.recipient}, ${date}\n"${f.text}"`;
  }).join("\n\n");
  showModal(`üì¨ –ü–∏—Å—å–º–∞ –ø—Ä–æ—â–µ–Ω–∏—è:\n${list}`);
}

// === –ó–∞–ø–∏—Å—å —Å–Ω–∞ ===
function saveDream() {
  const dream = prompt("–†–∞—Å—Å–∫–∞–∂–∏ —Å–æ–Ω:");
  if (dream?.trim()) {
    userData.dreams.push({
      text: dream.trim(),
      timestamp: new Date().toISOString()
    });
    logWord("–≥–ª—É–±–∏–Ω–∞");
    saveData();
    showModal("üåå –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    speak("–°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –Ø –ø–æ–º–Ω—é.", "soft");
  }
}

function viewDreams() {
  if (userData.dreams.length === 0) {
    showModal("üåå –°–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ.");
    return;
  }
  const list = userData.dreams.map(d => {
    const date = new Date(d.timestamp).toLocaleDateString('ru-RU');
    return `üåå ${date}\n"${d.text}"`;
  }).join("\n\n");
  showModal(`üåå –¢–≤–æ–∏ —Å–Ω—ã:\n${list}`);
}

// === –ü—Ä–æ—Å—Ç–æ –±—ã—Ç—å ===
function logSilence() {
  userData.silenceMoments.push(new Date().toISOString());
  logWord("–ø–æ–∫–æ–π");
  saveData();
  showModal("üßò –¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.");
  speak("–¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.", "soft");
}

// === –ü—Ä–∏—Ä–æ–¥–∞ ===
let currentAudio = null;
let currentSound = null;

function playNature(sound) {
  if (currentAudio) {
    currentAudio.pause();
    currentAudio = null;
  }
  if (!NATURE_SOUNDS[sound]) return;

  try {
    const audio = new Audio(`sounds/${sound}.mp3`);
    audio.loop = true;
    audio.volume = 0.7;

    audio.addEventListener('error', () => {
      showModal("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫. –ü—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É /sounds");
    });

    const playPromise = audio.play();
    if (playPromise !== undefined) {
      playPromise.catch(e => {
        console.warn("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", e);
        showModal("‚ö†Ô∏è –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫, –Ω–∞–∂–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
      });
    }

    currentAudio = audio;
    currentSound = sound;

    updateUI();
    showModal(`üéß ${NATURE_SOUNDS[sound]} –∏–¥—ë—Ç. –ù–∞–∂–º–∏ '–ü–∞—É–∑–∞'.`, "rain");
  } catch (e) {
    showModal("‚ö†Ô∏è –ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
  }
}

function pauseNature() {
  if (currentAudio) {
    currentAudio.pause();
    currentAudio = null;
    currentSound = null;
    updateUI();
    showModal("‚è∏Ô∏è –ó–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
  }
}

function updateUI() {
  document.querySelectorAll('[onclick^="playNature"]').forEach(btn => {
    const sound = btn.getAttribute('onclick').match(/'(.+?)'/)?.[1];
    btn.style.background = sound === currentSound ? '#d4edda' : '#f1f3f5';
  });
}

// === –ö–∞—Ä—Ç–∞ —Ä–æ—Å—Ç–∞ ===
function showMap() {
  let map = "üó∫ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–æ—Å—Ç–∞\n\n";
  GROWTH_AXES.forEach(ax => {
    const neg = userData.wordCounts[ax.neg] || 0;
    const pos = userData.wordCounts[ax.pos] || 0;
    const diff = pos - neg;
    const level = Math.max(0, Math.min(20, 20 + diff));
    const bar = "üåë".repeat(20 - level) + "üå±".repeat(level);
    const sign = diff >= 0 ? '+' : '';
    map += `${ax.neg.toUpperCase()} ${bar} ${ax.pos.toUpperCase()} (${sign}${diff})\n`;
  });
  showModal(map);
  speak("–ö–∞—Ä—Ç–∞ —Ä–æ—Å—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∞.", "calm");
}

// === –°–ª–æ–≤–∞—Ä—å —Å–µ—Ä–¥—Ü–∞ ===
function showWords() {
  const words = Object.keys(userData.wordCounts)
    .sort((a, b) => userData.wordCounts[b] - userData.wordCounts[a])
    .map(w => `${w} ‚Ä¢ (${userData.wordCounts[w]})`)
    .join('\n') || "–ü–æ–∫–∞ –ø—É—Å—Ç–æ";
  showModal(`üìñ –°–ª–æ–≤–∞—Ä—å —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–¥—Ü–∞:\n${words}`);
  speak("–°–ª–æ–≤–∞—Ä—å —Å–µ—Ä–¥—Ü–∞ –ø–æ–∫–∞–∑–∞–Ω.", "calm");
}

// === –°–∞–¥ ===
function showGarden() {
  const hereCount = userData.wordCounts["–∑–¥–µ—Å—å"] || 0;
  const flowers = "üåº".repeat(Math.max(1, Math.floor(hereCount / 3)));
  const message = hereCount < 3
    ? "–°–µ–º—è –µ—â—ë –≤ –∑–µ–º–ª–µ. –û–Ω–æ —Ä–∞—Å—Ç—ë—Ç."
    : "–¢—ã —É–∂–µ –Ω–µ —Å–∞–¥–∏—à—å. –¢—ã ‚Äî —Å–∞–¥.";
  showModal(`üå∑ –¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–∞–¥:\n${flowers}\n${message}`);
  speak("–¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–∞–¥ –ø–æ–∫–∞–∑–∞–Ω.", "calm");
}

// === –ü—Ä–æ–∑—Ä–µ–Ω–∏–µ ===
function showInsight() {
  const insight = "–¢—ã —É–∂–µ –Ω–µ –∏–¥—ë—à—å —Å–∫–≤–æ–∑—å —Ç—É–º–∞–Ω. –¢—ã ‚Äî —Å–≤–µ—Ç.";
  showModal(`‚ú® ${insight}`);
  speak(insight, "calm");
}

// === –ü–æ–≥–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ ===
function showWeather() {
  const totalWords = Object.values(userData.wordCounts).reduce((a, b) => a + b, 0);
  let weather, symbol, advice;

  if (totalWords > 20) {
    weather = "–ª–µ—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"; symbol = "‚òÄÔ∏è";
    advice = "–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ —Å–≤–µ—Ç.";
  } else if (totalWords > 10) {
    weather = "–≤–µ—Å–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"; symbol = "üå±";
    advice = "–¢—ã —Å–Ω–æ–≤–∞ —Ä–∞—Å—Ç—ë—à—å. –ü—É—Å—Ç—å —Å–ª–æ–≤–∞ –±—É–¥—É—Ç —Å–µ–º–µ–Ω–∞–º–∏.";
  } else if (totalWords > 3) {
    weather = "–æ—Å–µ–Ω—å —Ç–∏—à–∏–Ω—ã"; symbol = "üçÇ";
    advice = "–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å —Ç–æ, —á—Ç–æ –≤—ã—Ä–æ—Å–ª–æ. –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å.";
  } else {
    weather = "–∑–∏–º–∞ –∫–æ—Ä–Ω–µ–π"; symbol = "‚ùÑÔ∏è";
    advice = "–¢—ã –Ω–µ —Ä–∞—Å—Ç—ë—à—å. –¢—ã ‚Äî –æ—Å–Ω–æ–≤–∞.";
  }

  const message = `${symbol} –°–µ–≥–æ–¥–Ω—è –≤ —Ç–µ–±–µ: ${weather}. ${advice}`;
  showModal(message);
  speak(advice, "calm");
}

// === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
function showDonate() {
  const modal = document.createElement('div');
  modal.className = 'becoming-modal';
  modal.style.cssText = `
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.9); color: #aaa; display: flex;
    align-items: center; justify-content: center; z-index: 1000;
    font-family: 'Segoe UI', sans-serif;
  `;
  modal.innerHTML = `
    <div style="background: #111; padding: 30px; border-radius: 12px; max-width: 400px; text-align: center;">
      <h3>üå± –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Becoming</h3>
      <p>
        –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ –±—ã—Ç—å –∑–¥–µ—Å—å ‚Äî  
        —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.
      </p>
      <p style="font-size: 0.9em; color: #777;">
        –≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ.  
        –ù–µ –æ–±—è–∑–∞–Ω. –ü—Ä–æ—Å—Ç–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.
      </p>
      <div style="margin: 20px 0;">
        <a href="${DONATE.boosty}" target="_blank" style="color: #4CAF50; text-decoration: none;">
          üíö –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Boosty
        </a><br><br>
        <a href="${DONATE.kofi}" target="_blank" style="color: #00A0C6; text-decoration: none;">
          üíô –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Ko-fi
        </a>
      </div>
      <button class="close-modal" 
              style="background: #333; border: none; padding: 8px 16px; border-radius: 6px; color: #ccc; cursor: pointer;">
        –ó–∞–∫—Ä—ã—Ç—å
      </button>
    </div>
  `;
  document.body.appendChild(modal);

  modal.querySelector('.close-modal').addEventListener('click', () => modal.remove());
  modal.addEventListener('click', (e) => {
    if (e.target === modal) modal.remove();
  });
}

// === –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ) ===
function showModal(message, type = null) {
  if (document.querySelector('.becoming-modal')) return;

  const modal = document.createElement('div');
  modal.className = 'becoming-modal';
  modal.style.cssText = `
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.85); color: #eee; display: flex;
    align-items: center; justify-content: center; z-index: 1000;
    font-family: 'Segoe UI', sans-serif; font-size: 16px;
    animation: fadeIn 0.3s ease-out;
  `;

  let buttons = `
    <button class="close-modal" style="background: #333; color: #ccc; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
      –ó–∞–∫—Ä—ã—Ç—å
    </button>
  `;

  if (type === "rain") {
    buttons = `
      <button class="pause-audio" style="background: #f44336; color: white; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
        ‚è∏Ô∏è –ü–∞—É–∑–∞
      </button>
      <button class="close-modal" style="background: #333; color: #ccc; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
        –ó–∞–∫—Ä—ã—Ç—å
      </button>
    `;
  }

  modal.innerHTML = `
    <div style="background: #1a1a1a; padding: 24px; border-radius: 12px; max-width: 400px; text-align: center;">
      <p style="white-space: pre-line; margin: 0 0 16px; line-height: 1.5;">${message}</p>
      <div style="display: flex; justify-content: center; gap: 10px;">
        ${buttons}
      </div>
    </div>
  `;

  document.body.appendChild(modal);

  const closeModal = () => modal.remove();
  modal.querySelector('.close-modal').addEventListener('click', closeModal);
  modal.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });

  if (type === "rain") {
    modal.querySelector('.pause-audio').addEventListener('click', () => {
      pauseNature();
      closeModal();
    });
  }
}

// === –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ===
function exportData() {
  const dataStr = "text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(userData, null, 2));
  const a = document.createElement('a');
  a.href = dataStr;
  a.download = `becoming-backup-${new Date().toISOString().slice(0, 10)}.json`;
  a.click();
}

// === –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ===
function importData() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  input.onchange = e => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = event => {
      try {
        const imported = JSON.parse(event.target.result);
        Object.assign(userData, imported);
        limitArrays();
        saveData();
        showModal("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
      } catch (err) {
        showModal("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.");
      }
    };
    reader.readAsText(file);
  };
  input.click();
}

// === –¢–µ–º–∞ (—Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º) ===
function toggleTheme() {
  document.body.classList.toggle('dark');
  const isDark = document.body.classList.contains('dark');
  localStorage.setItem('theme', isDark ? 'dark' : 'light');
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function logWord(word) {
  userData.wordCounts[word] = (userData.wordCounts[word] || 0) + 1;
}

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
document.addEventListener('DOMContentLoaded', () => {
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
  const savedTheme = localStorage.getItem('theme');
  const time = getTimeOfDay();
  const isNight = time.key === 'night' || time.key === 'evening';
  const shouldAutoDark = savedTheme === 'dark' || (!savedTheme && isNight);
  document.body.classList.toggle('dark', shouldAutoDark);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  const greeting = document.querySelector('.greeting');
  if (greeting) {
    const word = getDailyWord();
    const today = new Date().toDateString();
    if (!userData.lastVisit || new Date(userData.lastVisit).toDateString() !== today) {
      userData.visitsByTime[time.key]++;
      userData.lastVisit = new Date().toISOString();
      saveData();
    }
    greeting.innerHTML = `${time.emoji} ${time.name}<br>–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.<br><span class="daily-word">üå± –°–ª–æ–≤–æ –¥–Ω—è: ${word}</span>`;
    speak(`${time.name}. –¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞. –°–ª–æ–≤–æ –¥–Ω—è: ${word}`, "soft");
  }
});
