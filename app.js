// app.js ‚Äî Becoming v1.3
// üå± –°–æ–∑–¥–∞–Ω–æ –ê–ª–µ–∫—Å–µ–π –ö–∞–ª—É–≥–∏–Ω, 2025
// –ù–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.
// –¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
const DONATE = {
  boosty: "https://boosty.to/becoming",
  kofi: "https://ko-fi.com/becoming5036"
};

const NATURE_SOUNDS = {
  rain: "üåßÔ∏è –î–æ–∂–¥—å",
  fire: "üî• –û–≥–æ–Ω—å",
  ocean: "üåä –û–∫–µ–∞–Ω"
};

const DAILY_WORDS = ["–î—ã—à–∏", "–∑–¥–µ—Å—å", "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–∏–¥–∏", "–≤–µ—Ä—å", "–±—É–¥—å"];

const GROWTH_AXES = [
  { neg: "–Ω–µ –∑–Ω–∞—é", pos: "–∑–¥–µ—Å—å", label: "–ì–ª—É–±–∏–Ω–∞" },
  { neg: "–æ–¥–∏–Ω", pos: "—Å–≤—è–∑—å", label: "–°–≤—è–∑—å" },
  { neg: "—É—Å—Ç–∞–ª", pos: "–ø–æ–∫–æ–π", label: "–≠–Ω–µ—Ä–≥–∏—è" },
  { neg: "—Å—Ç—Ä–∞—Ö", pos: "–≤–µ—Ä–∞", label: "–°–º–µ–ª–æ—Å—Ç—å" }
];

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ===
const userData = {
  version: 1.3,
  wordCounts: {},
  dailyWords: [],
  letters: [],
  dreams: [],
  forgiveness: [],
  silenceMoments: [],
  dailyPresence: [], // –¥–∞—Ç—ã, –∫–æ–≥–¥–∞ –æ—Ç–º–µ—Ç–∏–ª "–∑–¥–µ—Å—å"
  journal: [], // –¥–Ω–µ–≤–Ω–∏–∫
  rituals: {
    morning: [],
    evening: []
  },
  isSoundEnabled: true
};

// === –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
let currentCalendarDate = new Date();

function supportsStorage() {
  try {
    const test = '__test__';
    localStorage.setItem(test, test);
    localStorage.removeItem(test);
    return true;
  } catch (e) {
    return false;
  }
}

// === –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
function loadData() {
  try {
    if (!supportsStorage()) return;
    const saved = localStorage.getItem('becoming_data');
    if (saved) {
      const parsed = JSON.parse(saved);
      Object.assign(userData, parsed);
      userData.dailyWords = userData.dailyWords.filter(w =>
        w.date && !isNaN(new Date(w.date).getTime())
      );
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e);
  }
}

function saveData() {
  if (!supportsStorage()) return;
  try {
    localStorage.setItem('becoming_data', JSON.stringify(userData));
  } catch (e) {
    if (e.name === 'QuotaExceededError') {
      showModal("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö. –û—á–∏—Å—Ç–∏ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏.");
    } else {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", e);
    }
  }
}

loadData();

// === –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ===
function getTimeOfDay() {
  const hour = new Date().getHours();
  if (hour >= 5 && hour < 10) return { emoji: "üåÖ", name: "–£—Ç—Ä–æ", key: "morning" };
  if (hour >= 10 && hour < 18) return { emoji: "üå§Ô∏è", name: "–î–µ–Ω—å", key: "day" };
  if (hour >= 18 && hour < 23) return { emoji: "üåô", name: "–í–µ—á–µ—Ä", key: "evening" };
  return { emoji: "üåå", name: "–ù–æ—á—å", key: "night" };
}

// === –ê–≤—Ç–æ-—Ç–µ–º–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ ===
function applyTimeTheme() {
  const hour = new Date().getHours();
  const isNight = hour >= 21 || hour < 6;
  document.body.classList.toggle('dark', isNight);
  localStorage.setItem('theme', isNight ? 'dark' : 'light');
}

function updateSoundUI() {
  const btn = document.getElementById('sound-toggle');
  if (btn) {
    btn.textContent = userData.isSoundEnabled ? 'üîä' : 'üîá';
    btn.title = userData.isSoundEnabled ? '–í—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' : '–í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫';
  }
}

function toggleSound() {
  userData.isSoundEnabled = !userData.isSoundEnabled;
  saveData();
  updateSoundUI(); // –û–±–Ω–æ–≤–∏—Ç –∏–∫–æ–Ω–∫—É
  showModal(
    userData.isSoundEnabled 
      ? "üîä –ó–≤—É–∫ –≤–∫–ª—é—á—ë–Ω. –ü—Ä–∏—Ä–æ–¥–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã." 
      : "üîá –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω. –¢–∏—à–∏–Ω–∞ ‚Äî —Ç–æ–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ."
  );
}

// === –ì–æ–ª–æ—Å: Web Speech API ===
function speak(text, emotion = "calm") {
  if (!userData.isSoundEnabled || !window.speechSynthesis || !text || text.trim() === "") return;
  window.speechSynthesis.cancel();

  const utterance = new SpeechSynthesisUtterance(text);
  utterance.lang = 'ru-RU';

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏
  if (emotion === "soft") {
    utterance.rate = 0.7;
    utterance.pitch = 0.6;
  } else if (emotion === "urgent") {
    utterance.rate = 1.1;
    utterance.pitch = 1.0;
  } else if (emotion === "calm") {
    utterance.rate = 0.8;
    utterance.pitch = 0.7;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ–ª–æ—Å
  if (preferredVoice) {
    utterance.voice = preferredVoice;
    window.speechSynthesis.speak(utterance);
  } else {
    setTimeout(() => {
      if (preferredVoice) {
        utterance.voice = preferredVoice;
      }
      window.speechSynthesis.speak(utterance);
    }, 500);
  }
}

// === –°–ª–æ–≤–æ –¥–Ω—è ===
function getDailyWord() {
  const today = new Date().toDateString().split('T')[0];
  const usedToday = userData.dailyWords.filter(w =>
    new Date(w.date).toDateString() === today
  );
  if (usedToday.length > 0) return usedToday[0].word;

  const word = DAILY_WORDS[Math.floor(Math.random() * DAILY_WORDS.length)];
  userData.dailyWords.push({ word, date: new Date().toISOString() });
  saveData();
  return word;
}

// === –ü–∏—Å—å–º–æ —Å–µ–±–µ ===
function writeLetter() {
  const text = prompt("–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ —Å–µ–±–µ —á–µ—Ä–µ–∑ –≥–æ–¥:");
  if (text?.trim()) {
    userData.letters.push({
      content: text.trim(),
      timestamp: new Date().toISOString()
    });
    logWord("—Å–≤—è–∑—å");
    saveData();
    showModal("‚úâÔ∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
    speak("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", "soft");
  }
  updateGrowthStatus();
}

// === –ü–∏—Å—å–º–æ –ø—Ä–æ—â–µ–Ω–∏—é ===
function showForgiveness() {
  const recipient = prompt("–ö–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–µ–±–µ, –º–∞–º–µ)") || "—Ç–æ–º—É, –∫—Ç–æ –∂–¥–∞–ª";
  const content = prompt("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–∏—Å—å–º–æ:");
  if (content?.trim()) {
    userData.forgiveness.push({
      recipient: recipient.trim(),
      text: content.trim(),
      date: new Date().toISOString()
    });
    logWord("–ø–æ–∫–æ–π");
    saveData();
    showModal("‚úÖ –¢—ã —Å–∫–∞–∑–∞–ª. –≠—Ç–æ –≤–∞–∂–Ω–æ.");
    speak("–¢—ã —Å–∫–∞–∑–∞–ª. –≠—Ç–æ –≤–∞–∂–Ω–æ.", "calm");
  }
}

// === –ó–∞–ø–∏—Å—å —Å–Ω–∞ ===
function saveDream() {
  const dream = prompt("–†–∞—Å—Å–∫–∞–∂–∏ —Å–æ–Ω:");
  if (dream?.trim()) {
    userData.dreams.push({
      text: dream.trim(),
      timestamp: new Date().toISOString()
    });
    logWord("–≥–ª—É–±–∏–Ω–∞");
    saveData();
    showModal("üåå –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
    speak("–°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –Ø –ø–æ–º–Ω—é.", "soft");
  }
  updateGrowthStatus();
}

// === –ü–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Å–Ω—ã ===
function readDreams() {
  if (userData.dreams.length === 0) {
    showModal("üåå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Å–Ω–æ–≤.");
    return;
  }

  const list = userData.dreams
    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
    .map(dream => {
      const date = new Date(dream.timestamp).toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      return `${date}:\n"${dream.text}"`;
    })
    .join("\n\n");

  showModal(`üåå –¢–≤–æ–∏ —Å–Ω—ã:\n\n${list}`);
}

// === –ü—Ä–æ—Å—Ç–æ –±—ã—Ç—å (—Å —Ä–∏—Ç—É–∞–ª–æ–º —Ç–∏—à–∏–Ω—ã) ===
function logSilence() {
  if (window.silenceTimer) {
    showModal("üïØ –¢–∏—à–∏–Ω–∞ —É–∂–µ –∏–¥—ë—Ç. –ó–∞–≤–µ—Ä—à–∏ –µ—ë –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.");
    return;
  }

  userData.silenceMoments.push(new Date().toISOString());
  logWord("–ø–æ–∫–æ–π");
  saveData();

  showModal("üïØ –†–∏—Ç—É–∞–ª —Ç–∏—à–∏–Ω—ã –Ω–∞—á–∞–ª—Å—è.\n3 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ç–µ–±—è.", "silence");

  if (!currentAudio) {
    playNature('rain');
  }

  window.silenceTimer = setTimeout(() => {
    delete window.silenceTimer;
    showModal("üïØ –¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.\n–¢—ã –Ω–µ –¥–µ–ª–∞–ª. –¢—ã –ø—Ä–æ—Å—Ç–æ –±—ã–ª.");
    speak("–¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.", "soft");

    setTimeout(() => {
      try {
        const bell = new Audio('sounds/bell.mp3');
        bell.volume = 0.4;
        bell.play().catch(() => {});
      } catch (e) {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω.");
      }
    }, 2000);
  }, 3 * 60 * 1000);
  updateGrowthStatus();
}

// === –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–∏—à–∏–Ω—É ===
function cancelSilence() {
  if (!window.silenceTimer) {
    showModal("üïØ –¢–∏—à–∏–Ω–∞ –Ω–µ –∏–¥—ë—Ç.");
    return;
  }

  clearTimeout(window.silenceTimer);
  delete window.silenceTimer;

  showModal("üïØ –¢—ã –≤—ã—à–µ–ª –∏–∑ —Ç–∏—à–∏–Ω—ã. –≠—Ç–æ —Ç–æ–∂–µ –≤—ã–±–æ—Ä.");
  speak("–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ç–∏—à–∏–Ω—ã. –≠—Ç–æ —Ç–æ–∂–µ –≤—ã–±–æ—Ä.", "soft");
}

// === –ü—Ä–∏—Ä–æ–¥–∞ ===
let currentAudio = null;
let currentSound = null;

function playNature(sound) {
  if (!userData.isSoundEnabled) {
    showModal("üîá –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.");
    return;
  }
  
  if (currentAudio) {
    currentAudio.pause();
    currentAudio = null;
  }
  if (!NATURE_SOUNDS[sound]) return;

  try {
    const audio = new Audio(`sounds/${sound}.mp3`);
    audio.loop = true;
    audio.volume = 0.7;

    audio.addEventListener('error', () => {
      showModal("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–≤—É–∫. –ü—Ä–æ–≤–µ—Ä—å –ø–∞–ø–∫—É /sounds");
    });

    const playPromise = audio.play();
    if (playPromise !== undefined) {
      playPromise.catch(e => {
        console.warn("–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:", e);
        showModal("‚ö†Ô∏è –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫, –Ω–∞–∂–º–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
      });
    }

    currentAudio = audio;
    currentSound = sound;

    updateUI();
    showModal(`üéß ${NATURE_SOUNDS[sound]} –∏–¥—ë—Ç. –ù–∞–∂–º–∏ '–ü–∞—É–∑–∞'.`, "rain");
  } catch (e) {
    showModal("‚ö†Ô∏è –ó–≤—É–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.");
  }
}

function pauseNature() {
  if (currentAudio) {
    currentAudio.pause();
    currentAudio = null;
    currentSound = null;
    updateUI();
    showModal("‚è∏Ô∏è –ó–≤—É–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
  }
}

function updateUI() {
  document.querySelectorAll('[onclick^="playNature"]').forEach(btn => {
    const sound = btn.getAttribute('onclick').match(/'(.+?)'/)?.[1];
    btn.style.background = sound === currentSound ? '#d4edda' : '#f1f3f5';
  });
}

// === –ö–∞—Ä—Ç–∞ —Ä–æ—Å—Ç–∞ (–ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ===
function showMap() {
  let map = `üå± –ö–∞—Ä—Ç–∞ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏
`;

  GROWTH_AXES.forEach(ax => {
    const neg = userData.wordCounts[ax.neg] || 0;
    const pos = userData.wordCounts[ax.pos] || 0;
    const total = neg + pos;
    let percentage = total === 0 ? 50 : Math.round((pos / total) * 100);
    const barLength = 20;
    const filled = Math.round(barLength * (percentage / 100));

    const bar = "‚ñ´Ô∏è".repeat(barLength - filled) + "üü©".repeat(filled);

    let status = "–≤ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–∏";
    if (percentage > 70) status = "–≤ —Å–∏–ª–µ";
    else if (percentage > 60) status = "–ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç";
    else if (percentage < 30) status = "–≤ —Ç–µ–Ω–∏";
    else if (percentage < 40) status = "–æ—Å–ª–∞–±–ª–µ–Ω–æ";

    map += `
${ax.label}
${ax.neg.toUpperCase()} ‚Üí ${bar} ‚Üê ${ax.pos.toUpperCase()}
(${neg} : ${pos}) ‚Äî ${status}
`;
  });

  showModal(map);
  speak("–ö–∞—Ä—Ç–∞ —Ç–≤–æ–µ–≥–æ –ø—É—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", "calm");
}

// === –°–∞–¥ (—Ä–∞—Å—Ç—ë—Ç –æ—Ç —Å–ª–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è) ===
function updateGrowthStatus() {
  // === –°–∞–¥ ===
  const hereCount = ["–∑–¥–µ—Å—å", "—Å–µ–π—á–∞—Å", "–µ—Å—Ç—å", "—á—É–≤—Å—Ç–≤—É—é"].reduce(
    (sum, w) => sum + (userData.wordCounts[w] || 0), 0
  );
  const gardenStatus = document.getElementById('garden-status');
  if (gardenStatus) {
    if (hereCount < 2) {
      gardenStatus.textContent = "–°–µ–º—è –µ—â—ë –≤ –∑–µ–º–ª–µ. –û–Ω–æ —Ä–∞—Å—Ç—ë—Ç.";
    } else if (hereCount < 5) {
      gardenStatus.textContent = "–ü–µ—Ä–≤—ã–µ —Ä–æ—Å—Ç–∫–∏. –¢—ã —É–∂–µ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–¥–∏—à—å.";
    } else if (hereCount < 10) {
      gardenStatus.textContent = "–¢—ã —É–∂–µ –Ω–µ —Å–∞–¥–∏—à—å. –¢—ã ‚Äî —Å–∞–¥.";
    } else {
      gardenStatus.textContent = "–¢—ã ‚Äî –Ω–µ —Å–∞–¥. –¢—ã ‚Äî —Å–µ–∑–æ–Ω.";
    }
  }

  // === –°–ª–æ–≤–∞—Ä—å —Å–µ—Ä–¥—Ü–∞ ===
  const wordsCount = Object.keys(userData.wordCounts).length;
  const wordsStatus = document.getElementById('words-status');
  if (wordsStatus) {
    if (wordsCount === 0) {
      wordsStatus.textContent = "–ü–æ–∫–∞ —Ç–∏—à–∏–Ω–∞. –≠—Ç–æ —Ç–æ–∂–µ –Ω–∞—á–∞–ª–æ.";
    } else if (wordsCount < 3) {
      wordsStatus.textContent = `–¢—ã —É–∂–µ —Å–∫–∞–∑–∞–ª ${wordsCount} —Å–ª–æ–≤.`;
    } else if (wordsCount < 6) {
      wordsStatus.textContent = `–¢—ã —É–∂–µ —Å–∫–∞–∑–∞–ª ${wordsCount} —Å–ª–æ–≤. –¢—ã —Å–ª—ã—à–∏—à—å —Å–µ–±—è.`;
    } else {
      wordsStatus.textContent = `–¢—ã —É–∂–µ —Å–∫–∞–∑–∞–ª ${wordsCount} —Å–ª–æ–≤. –¢–≤–æ–π —è–∑—ã–∫ ‚Äî –∂–∏–≤–æ–π.`;
    }
  }

  // === –ü—Ä–æ–∑—Ä–µ–Ω–∏–µ ===
  const insightStatus = document.getElementById('insight-status');
  if (insightStatus) {
    const insight = generateInsightSnippet();
    insightStatus.textContent = generateInsightSnippet();
  }

  // === –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç—ã —Ä–æ—Å—Ç–∞ ===
  const mapPreview = document.getElementById('map-preview');
  if (mapPreview) {
    const axes = GROWTH_AXES.map(ax => {
      const neg = userData.wordCounts[ax.neg] || 0;
      const pos = userData.wordCounts[ax.pos] || 0;
      const diff = pos - neg;
      if (diff > 2) return ax.label;
      if (diff < -2) return `—Ç–µ–Ω—å ${ax.label}`;
      return null;
    }).filter(Boolean).slice(0, 2).join(", ") || "–≤ –¥–≤–∏–∂–µ–Ω–∏–∏";

    mapPreview.textContent = `–¢—ã –≤ ${axes}.`;
  }
}

// === –ö—Ä–∞—Ç–∫–∏–µ –ø—Ä–æ–∑—Ä–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ ===
function generateInsightSnippet() {
  const words = userData.wordCounts;
  if (words["–∑–¥–µ—Å—å"] > 5) return "–¢—ã —É–∂–µ –Ω–µ –∏—â–µ—à—å. –¢—ã ‚Äî –∑–¥–µ—Å—å.";
  if (words["–ø–æ–∫–æ–π"] > 3) return "–¢—ã –±–æ–ª—å—à–µ –Ω–µ –±–µ–∂–∏—à—å. –¢—ã ‚Äî –ø–æ–∫–æ–π.";
  if (words["—Å–≤—è–∑—å"] > 2) return "–¢—ã –Ω–µ –æ–¥–∏–Ω. –¢—ã ‚Äî —Å–≤—è–∑—å.";
  if (words["–≤–µ—Ä–∞"] > words["—Å—Ç—Ä–∞—Ö"]) return "–¢—ã —É–∂–µ –Ω–µ –±–æ–∏—à—å—Å—è. –¢—ã ‚Äî –≤–µ—Ä–∞.";
  return "–ß—Ç–æ-—Ç–æ —É–∂–µ –º–µ–Ω—è–µ—Ç—Å—è...";
}


// === –ü–æ–≥–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞ —Å–ª–æ–≤) ===
function showWeather() {
  const words = userData.wordCounts;
  const light = (words["–∑–¥–µ—Å—å"] || 0) + (words["–ø–æ–∫–æ–π"] || 0) + (words["—Å–≤—è–∑—å"] || 0);
  const shadow = (words["—Å—Ç—Ä–∞—Ö"] || 0) + (words["—É—Å—Ç–∞–ª"] || 0) + (words["–Ω–µ –∑–Ω–∞—é"] || 0);
  const silence = (words["—Ç–∏—à–∏–Ω–∞"] || 0) + (words["—Å–æ–Ω"] || 0);

  let weather, symbol, advice;

  if (light > shadow * 2) {
    weather = "—è—Å–Ω–æ"; symbol = "‚òÄÔ∏è";
    advice = "–¢—ã —Å–≤–µ—Ç–∏—à—å. –≠—Ç–æ —É–∂–µ –ø–æ–≥–æ–¥–∞.";
  } else if (light > shadow) {
    weather = "–ø–µ—Ä–µ–º–µ–Ω–Ω–æ"; symbol = "üå§Ô∏è";
    advice = "–¢—ã —É–∂–µ –Ω–µ –≤ —Ç—É–º–∞–Ω–µ. –¢—ã ‚Äî –≤ –¥–≤–∏–∂–µ–Ω–∏–∏.";
  } else if (shadow > light) {
    weather = "–±—É—Ä—è"; symbol = "‚õàÔ∏è";
    advice = "–¢—ã –≤ –±—É—Ä–µ. –ù–æ —Ç—ã ‚Äî –Ω–µ –æ–Ω–∞. –¢—ã ‚Äî —Ç–æ—Ç, –∫—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç.";
  } else if (silence > 3) {
    weather = "—Ç—É–º–∞–Ω"; symbol = "üå´Ô∏è";
    advice = "–¢—ã –º–æ–ª—á–∏—à—å. –≠—Ç–æ –Ω–µ –ø—É—Å—Ç–æ—Ç–∞. –≠—Ç–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.";
  } else {
    weather = "–∫–æ—Ä–Ω–∏"; symbol = "üå±";
    advice = "–¢—ã –Ω–µ —Ä–∞—Å—Ç—ë—à—å. –¢—ã ‚Äî –∫–æ—Ä–Ω–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ.";
  }

  const message = `${symbol} –°–µ–≥–æ–¥–Ω—è –≤ —Ç–µ–±–µ: ${weather}. ${advice}`;
  showModal(message);
  speak(advice, "calm");
}

// === –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ===
function showDonate() {
  const modal = document.createElement('div');
  modal.className = 'becoming-modal';
  modal.style.cssText = `
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.9); color: #aaa; display: flex;
    align-items: center; justify-content: center; z-index: 1000;
    font-family: 'Segoe UI', sans-serif;
  `;
  modal.innerHTML = `
    <div style="background: #111; padding: 30px; border-radius: 12px; max-width: 400px; text-align: center;">
      <h3>üå± –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Becoming</h3>
      <p>
        –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ –±—ã—Ç—å –∑–¥–µ—Å—å ‚Äî  
        —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.
      </p>
      <p style="font-size: 0.9em; color: #777;">
        –≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ.  
        –ù–µ –æ–±—è–∑–∞–Ω. –ü—Ä–æ—Å—Ç–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.
      </p>
      <div style="margin: 20px 0;">
        <a href="${DONATE.boosty}" target="_blank" style="color: #4CAF50; text-decoration: none;">
          üíö –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Boosty
        </a><br><br>
        <a href="${DONATE.kofi}" target="_blank" style="color: #00A0C6; text-decoration: none;">
          üíô –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Ko-fi
        </a>
      </div>
      <button class="close-modal" 
              style="background: #333; border: none; padding: 8px 16px; border-radius: 6px; color: #ccc; cursor: pointer;">
        –ó–∞–∫—Ä—ã—Ç—å
      </button>
    </div>
  `;
  document.body.appendChild(modal);

  modal.querySelector('.close-modal').addEventListener('click', () => modal.remove());
  modal.addEventListener('click', (e) => {
    if (e.target === modal) modal.remove();
  });
}

// === –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ) ===
function showModal(message, type = null) {
  if (document.querySelector('.becoming-modal')) return;

  const modal = document.createElement('div');
  modal.className = 'becoming-modal';
  modal.style.cssText = `
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.85); color: #eee; display: flex;
    align-items: center; justify-content: center; z-index: 1000;
    font-family: 'Segoe UI', sans-serif; font-size: 16px;
    animation: fadeIn 0.3s ease-out;
  `;

  let buttons = `
    <button class="close-modal" style="background: #333; color: #ccc; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
      –ó–∞–∫—Ä—ã—Ç—å
    </button>
  `;

  if (type === "rain" || type === "silence") {
    buttons = `
      <button class="pause-audio" style="background: #f44336; color: white; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
        ‚è∏Ô∏è –ü–∞—É–∑–∞
      </button>
      <button class="cancel-silence" style="background: #ff9800; color: white; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
        üõë –ü—Ä–µ—Ä–≤–∞—Ç—å
      </button>
      <button class="close-modal" style="background: #333; color: #ccc; border: none; padding: 6px 12px; border-radius: 6px; cursor: pointer;">
        –ó–∞–∫—Ä—ã—Ç—å
      </button>
    `;
  }

  modal.innerHTML = `
    <div style="background: #1a1a1a; padding: 24px; border-radius: 12px; max-width: 400px; text-align: center;">
      <p style="white-space: pre-line; margin: 0 0 16px; line-height: 1.5;">${message}</p>
      <div style="display: flex; justify-content: center; gap: 10px;">
        ${buttons}
      </div>
    </div>
  `;

  document.body.appendChild(modal);

  const closeModal = () => modal.remove();
  modal.querySelector('.close-modal').addEventListener('click', closeModal);
  modal.addEventListener('click', (e) => {
    if (e.target === modal) closeModal();
  });

  if (type === "rain") {
    modal.querySelector('.pause-audio').addEventListener('click', () => {
      pauseNature();
      closeModal();
    });
  }

  if (type === "silence") {
    modal.querySelector('.pause-audio').addEventListener('click', () => {
      pauseNature();
    });
    modal.querySelector('.cancel-silence').addEventListener('click', () => {
      cancelSilence();
      closeModal();
    });
  }
}

// === –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω) ===
/*
function exportData() {
  const dataStr = "text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(userData, null, 2));
  const a = document.createElement('a');
  a.href = dataStr;
  a.download = `becoming-backup-${new Date().toISOString().slice(0, 10)}.json`;
  a.click();
}
*/

// === –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω) ===
/*
function importData() {
  const input = document.createElement('input');
  input.type = 'file';
  input.accept = '.json';
  input.onchange = e => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = event => {
      try {
        const imported = JSON.parse(event.target.result);
        Object.assign(userData, imported);
        saveData();
        showModal("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.");
      } catch (err) {
        showModal("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.");
      }
    };
    reader.readAsText(file);
  };
  input.click();
}
*/

// === –¢–µ–º–∞ (—Ç—ë–º–Ω—ã–π —Ä–µ–∂–∏–º) ===
function toggleTheme() {
  document.body.classList.toggle('dark');
  const isDark = document.body.classList.contains('dark');
  localStorage.setItem('theme', isDark ? 'dark' : 'light');
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
function logWord(word) {
  const key = word.toLowerCase().trim().replace(/[^\w–∞-—è—ë]/g, '');
  userData.wordCounts[key] = (userData.wordCounts[key] || 0) + 1;
}

// === –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: –æ—Ç–º–µ—Ç–∏—Ç—å –¥–µ–Ω—å ===
function markPresence() {
  const today = new Date().toDateString();
  if (!userData.dailyPresence.includes(today)) {
    userData.dailyPresence.push(today);
    logWord("–∑–¥–µ—Å—å");
    saveData();
    showModal("‚úÖ –¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.");
    speak("–¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.", "soft");
    updateUI();
  } else {
    showModal("üå± –¢—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª —ç—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.");
  }
  updateGrowthStatus();
}

// === –î–Ω–µ–≤–Ω–∏–∫ ===
function writeJournal() {
  const entry = prompt("–ó–∞–ø–∏—à–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–µ, –º—ã—Å–ª—å, —á—É–≤—Å—Ç–≤–∞:");
  if (entry?.trim()) {
    userData.journal.push({
      text: entry.trim(),
      date: new Date().toISOString()
    });
    saveData();
    showModal("üìñ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫.");
    speak("–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.", "soft");
  }
  updateGrowthStatus();
}

function readJournal() {
  if (userData.journal.length === 0) {
    showModal("üìñ –î–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.");
    return;
  }
  const list = userData.journal
    .sort((a, b) => new Date(b.date) - new Date(a.date))
    .map(e => {
      const date = new Date(e.date).toLocaleDateString('ru-RU');
      return `${date}:\n"${e.text}"`;
    }).join("\n\n");
  showModal(`üìñ –¢–≤–æ–π –¥–Ω–µ–≤–Ω–∏–∫:\n\n${list}`);
}

// === –£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª ===
function morningRitual() {
  const words = prompt("–¢—Ä–∏ —Å–ª–æ–≤–∞, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å –¥–µ–Ω—å:");
  if (words?.trim()) {
    userData.rituals.morning.push({
      words: words.trim(),
      date: new Date().toISOString()
    });
    words.trim().split(/\s+/).forEach(w => logWord(w));
    saveData();
    showModal("üåÖ –£—Ç—Ä–æ –Ω–∞—á–∞—Ç–æ. –ü—É—Å—Ç—å —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –ø—É—Ç–µ–≤–æ–¥–Ω—ã–º–∏.");
    speak("–£—Ç—Ä–æ –Ω–∞—á–∞—Ç–æ. –ü—É—Å—Ç—å —Å–ª–æ–≤–∞ –±—É–¥—É—Ç –ø—É—Ç–µ–≤–æ–¥–Ω—ã–º–∏.", "calm");
  }
}

// === –í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª ===
function eveningRitual() {
  const word = prompt("–ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –≤–µ—á–µ—Ä–∞?");
  const thanks = prompt("–ó–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω —Å–µ–≥–æ–¥–Ω—è?");
  if (word?.trim() || thanks?.trim()) {
    userData.rituals.evening.push({
      word: word?.trim() || "‚Äî",
      thanks: thanks?.trim() || "‚Äî",
      date: new Date().toISOString()
    });
    if (word) logWord(word.trim().toLowerCase());
    saveData();
    showModal("üåô –î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∂–∏–ª ‚Äî —Ç—ã –±—ã–ª.");
    speak("–î–µ–Ω—å –∑–∞–≤–µ—Ä—à—ë–Ω. –¢—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∂–∏–ª ‚Äî —Ç—ã –±—ã–ª.", "soft");
  }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI ===
function updateUI() {
  renderYearMap();
  const count = userData.dailyPresence.length;
  const counter = document.getElementById('presence-count');
  if (counter) counter.textContent = count;

  const mapStatus = document.getElementById('day-map-status');
  if (mapStatus) {
    mapStatus.textContent = count === 0
      ? "üó∫ –ö–∞—Ä—Ç–∞ –¥–Ω—è: –ø–æ–∫–∞ –ø—É—Å—Ç–∞\n–û—Ç–º–µ—Ç—å –º–æ–º–µ–Ω—Ç ‚Äî –∏ –æ–Ω–∞ –æ–∂–∏–≤—ë—Ç."
      : `‚úÖ –¢—ã –±—ã–ª —Å —Å–æ–±–æ–π ${count} –¥–Ω–µ–π.\n–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –Ω–∞—á–∞–ª–æ.`;
  }
}

// === –ö–∞—Ä—Ç–∞ –≥–æ–¥–∞ ===
function renderYearMap() {
  const container = document.getElementById('year-map');
  if (!container) return;

  const now = new Date();
  const year = now.getFullYear();
  const month = now.getMonth();
  const daysInMonth = new Date(year, month + 1, 0).getDate();

  let html = `<div class="legend">
    <span>üü© –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ</span>
    <span>üü® –£—Å—Ç–∞–ª–æ—Å—Ç—å</span>
    <span>üü• –ë–æ–ª—å</span>
    <span>üîµ –°–æ–Ω</span>
    <span>‚ö™ –ü—Ä–æ–ø—É—â–µ–Ω</span>
  </div><br>`;

  html += `<div class="month">${year}-${String(month + 1).padStart(2, '0')}:</div>`;
  html += '<div class="calendar">';

  for (let day = 1; day <= daysInMonth; day++) {
    const date = new Date(year, month, day).toDateString();
    const isPresent = userData.dailyPresence.includes(date);
    const emoji = isPresent ? "üü©" : "‚ö™";
    html += `<span class="day" title="${date}">${emoji}</span>`;
  }

  html += '</div>';
  container.innerHTML = html;
}

// === –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ ===
function showAbout() {
  const aboutText = `üå± Becoming ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ —Å–µ–±–µ.

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
  ‚Ä¢ ‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –ø–∏—Å—å–º–æ —Å–µ–±–µ ‚Äî —á–µ—Ä–µ–∑ –≥–æ–¥, —á–µ—Ä–µ–∑ –∂–∏–∑–Ω—å
  ‚Ä¢ üåå –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–æ–Ω, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–Ω–∏—à—å
  ‚Ä¢ üçÉ –ü—Ä–æ–∏–∑–Ω–µ—Å—Ç–∏ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å—Ç—ë—Ç: "–∑–¥–µ—Å—å", "–≤–µ—Ä—å", "–¥—ã—à–∞—Ç—å"
  ‚Ä¢ üå∑ –£–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ç–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–∞–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ "—è –±—ã–ª"
  ‚Ä¢ üåô –û—Ç–º–µ—Ç–∏—Ç—å 3 –º–∏–Ω—É—Ç—ã —Ç–∏—à–∏–Ω—ã ‚Äî –±–µ–∑ –¥–µ–ª–∞, –±–µ–∑ —Å–º—ã—Å–ª–∞
  ‚Ä¢ üåø –ü—Ä–æ—Å—Ç–∏—Ç—å ‚Äî —Å–µ–±–µ, –¥—Ä—É–≥–æ–º—É, –ø—Ä–æ—à–ª–æ–º—É

–ó–¥–µ—Å—å –Ω–µ—Ç:
  ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥–æ–≤
  ‚Ä¢ "–î–æ–ª–∂–µ–Ω"
  ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–π

–ï—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç—ã.
–ò –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∞–∑–∞—Ç—å: 
"–Ø –∑–¥–µ—Å—å. 
–≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞."

–°–æ–∑–¥–∞–Ω–æ —Å –∑–∞–±–æ—Ç–æ–π ‚Äî –ê–ª–µ–∫—Å–µ–π –ö–∞–ª—É–≥–∏–Ω, 2025`;

  showModal(aboutText);
}

// === –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω—å (–ø–æ –¥–∞—Ç–µ) ===
function reviewDay() {
  const dateStr = prompt("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä. 12.05.2025):");
  if (!dateStr) return;

  const parts = dateStr.split('.');
  if (parts.length !== 3) {
    showModal("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú.–ì–ì–ì–ì");
    return;
  }
  const [day, month, year] = parts.map(Number);
  const targetDate = new Date(year, month - 1, day);
  if (isNaN(targetDate.getTime())) {
    showModal("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞.");
    return;
  }

  const target = targetDate.toDateString();

  const journalEntries = userData.journal.filter(e => new Date(e.date).toDateString() === target);
  const dreams = userData.dreams.filter(e => new Date(e.timestamp).toDateString() === target);
  const rituals = [
    ...userData.rituals.morning.filter(r => new Date(r.date).toDateString() === target),
    ...userData.rituals.evening.filter(r => new Date(r.date).toDateString() === target)
  ];
  const presence = userData.dailyPresence.includes(target);

  let content = `üìÖ ${day}.${month}.${year}\n\n`;
  if (presence) content += "‚úÖ –û—Ç–º–µ—Ç–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ\n\n";
  if (journalEntries.length > 0) {
    content += "üìñ –î–Ω–µ–≤–Ω–∏–∫:\n";
    journalEntries.forEach(e => {
      const time = new Date(e.date).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      content += `  ${time}: "${e.text}"\n`;
    });
    content += "\n";
  }
  if (dreams.length > 0) {
    content += "üåå –°–Ω—ã:\n";
    dreams.forEach(d => {
      const time = new Date(d.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      content += `  ${time}: "${d.text}"\n`;
    });
    content += "\n";
  }
  if (rituals.length > 0) {
    content += "üåÖüåô –†–∏—Ç—É–∞–ª—ã:\n";
    rituals.forEach(r => {
      const time = new Date(r.date).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      if (r.words) content += `  ${time} (—É—Ç—Ä–æ): ${r.words}\n`;
      if (r.word) content += `  ${time} (–≤–µ—á–µ—Ä): "${r.word}", –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: "${r.thanks}"\n`;
    });
    content += "\n";
  }
  if (content === `üìÖ ${day}.${month}.${year}\n\n`) {
    content += "–î–µ–Ω—å –ø—É—Å—Ç. –ù–æ —Ç—ã –±—ã–ª ‚Äî –∏ —ç—Ç–æ —É–∂–µ –≤–∞–∂–Ω–æ.";
  }

  showModal(content);
}

// === –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ===
function renderCalendar() {
  const container = document.getElementById('calendar-grid');
  const monthYearLabel = document.getElementById('calendar-month-year');
  if (!container || !monthYearLabel) return;

  const date = currentCalendarDate;
  const year = date.getFullYear();
  const month = date.getMonth();

  const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                      '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
  monthYearLabel.textContent = `${monthNames[month]} ${year}`;

  const firstDay = new Date(year, month, 1);
  const startingDayOfWeek = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;

  const lastDay = new Date(year, month + 1, 0);
  const daysInMonth = lastDay.getDate();

  container.innerHTML = '';

  const dayNames = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
  dayNames.forEach(name => {
    const header = document.createElement('div');
    header.textContent = name;
    header.style.fontWeight = '600';
    header.style.color = '#666';
    header.style.textAlign = 'center';
    container.appendChild(header);
  });

  for (let i = 0; i < startingDayOfWeek; i++) {
    const empty = document.createElement('div');
    empty.className = 'day empty';
    container.appendChild(empty);
  }

  const today = new Date();
  for (let day = 1; day <= daysInMonth; day++) {
    const dayDate = new Date(year, month, day);
    const dayStr = dayDate.toDateString();

    const cell = document.createElement('div');
    cell.className = 'day';
    cell.textContent = day;

    if (dayDate.toDateString() === today.toDateString()) {
      cell.classList.add('today');
    }

    const hasJournal = userData.journal.some(e => new Date(e.date).toDateString() === dayStr);
    const hasDream = userData.dreams.some(e => new Date(e.timestamp).toDateString() === dayStr);
    const hasMorning = userData.rituals.morning.some(r => new Date(r.date).toDateString() === dayStr);
    const hasEvening = userData.rituals.evening.some(r => new Date(r.date).toDateString() === dayStr);
    const hasPresence = userData.dailyPresence.includes(dayStr);
    const hasSilence = userData.silenceMoments.some(t => new Date(t).toDateString() === dayStr);

    if (hasJournal) cell.classList.add('has-journal');
    if (hasDream) cell.classList.add('has-dream');
    if (hasMorning || hasEvening) cell.classList.add('has-ritual');
    if (hasPresence) cell.classList.add('has-presence');
    if (hasSilence) cell.classList.add('has-silence');

    cell.style.cursor = 'pointer';
    cell.title = '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω—å';
    cell.addEventListener('click', () => {
      const formatted = `${day.toString().padStart(2, '0')}.${(month + 1).toString().padStart(2, '0')}.${year}`;
      reviewDayFromCalendar(formatted);
    });

    container.appendChild(cell);
  }
}

// === –°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞ ===
function changeMonth(delta) {
  currentCalendarDate.setMonth(currentCalendarDate.getMonth() + delta);
  renderCalendar();
}

// === –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω—è (–∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è) ===
function reviewDayFromCalendar(dateStr) {
  const parts = dateStr.split('.');
  const [day, month, year] = parts.map(Number);
  const targetDate = new Date(year, month - 1, day);
  const target = targetDate.toDateString();

  let content = `üìÖ ${day}.${month}.${year}\n\n`;

  const presence = userData.dailyPresence.includes(target);
  if (presence) {
    content += "‚úÖ –û—Ç–º–µ—Ç–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ\n\n";
  }

  const journal = userData.journal.filter(e => new Date(e.date).toDateString() === target);
  if (journal.length > 0) {
    content += "üìñ –î–Ω–µ–≤–Ω–∏–∫:\n";
    journal.forEach(e => {
      const time = new Date(e.date).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      content += `  ${time}: "${e.text}"\n`;
    });
    content += "\n";
  }

  const dreams = userData.dreams.filter(e => new Date(e.timestamp).toDateString() === target);
  if (dreams.length > 0) {
    content += "üåå –°–Ω—ã:\n";
    dreams.forEach(d => {
      const time = new Date(d.timestamp).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      content += `  ${time}: "${d.text}"\n`;
    });
    content += "\n";
  }

  const rituals = [
    ...userData.rituals.morning.filter(r => new Date(r.date).toDateString() === target),
    ...userData.rituals.evening.filter(r => new Date(r.date).toDateString() === target)
  ];
  if (rituals.length > 0) {
    content += "üåÖüåô –†–∏—Ç—É–∞–ª—ã:\n";
    rituals.forEach(r => {
      const time = new Date(r.date).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
      if (r.words) content += `  ${time} (—É—Ç—Ä–æ): ${r.words}\n`;
      if (r.word) content += `  ${time} (–≤–µ—á–µ—Ä): "${r.word}", –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: "${r.thanks}"\n`;
    });
    content += "\n";
  }

  if (content === `üìÖ ${day}.${month}.${year}\n\n`) {
    content += "–î–µ–Ω—å –ø—É—Å—Ç. –ù–æ —Ç—ã –±—ã–ª ‚Äî –∏ —ç—Ç–æ —É–∂–µ –≤–∞–∂–Ω–æ.";
  }

  showModal(content);
}

// === –í—ã–±–æ—Ä –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ ===
let preferredVoice = null;

function loadPreferredVoice() {
  if (!window.speechSynthesis) return;

  const voices = speechSynthesis.getVoices();

  // –ò—â–µ–º —Ä—É—Å—Å–∫–∏–π –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ –º—è–≥–∫–∏–π –≥–æ–ª–æ—Å
  preferredVoice = voices.find(voice => 
    voice.lang.startsWith('ru') && 
    (
      voice.name.toLowerCase().includes('female') || 
      voice.name.toLowerCase().includes('–∂–µ–Ω—Å–∫–∏–π') || 
      voice.name.toLowerCase().includes('alena') || 
      voice.name.toLowerCase().includes('alyss')
    )
  );

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ª—é–±–æ–π —Ä—É—Å—Å–∫–∏–π
  if (!preferredVoice) {
    preferredVoice = voices.find(voice => voice.lang.startsWith('ru'));
  }

  // –ï—Å–ª–∏ –∏ –Ω–µ—Ç —Ä—É—Å—Å–∫–æ–≥–æ ‚Äî –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
  if (!preferredVoice && voices.length > 0) {
    preferredVoice = voices[0];
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if ('speechSynthesis' in window) {
  // –í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö –≥–æ–ª–æ—Å–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è
  window.speechSynthesis.getVoices();
  setTimeout(() => {
    window.speechSynthesis.getVoices(); // –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
    loadPreferredVoice();
  }, 100);
  setTimeout(loadPreferredVoice, 500); // –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
}

// === –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏ ===
function navigateTo(screenId) {
  document.querySelectorAll('.screen').forEach(s => {
    s.classList.remove('active');
  });
  const screen = document.getElementById(screenId);
  if (screen) screen.classList.add('active');

  document.querySelectorAll('.nav-item').forEach(btn => {
    btn.classList.remove('active');
  });

  // –ù–∞–π–¥—ë–º –∫–Ω–æ–ø–∫—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —ç–∫—Ä–∞–Ω–æ–º
  const navButton = document.querySelector(`[onclick="navigateTo('${screenId}')"]`);
  if (navButton) navButton.classList.add('active');
  // –ï—Å–ª–∏ –∑–∞—à–ª–∏ –Ω–∞ "—Ä–æ—Å—Ç" ‚Äî –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å
  if (screenId === 'growth') {
    updateGrowthStatus();
  }
}

// === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∑—Ä–µ–Ω–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π ===
function getDailyInsight() {
  const words = userData.wordCounts;
  if (words["–∑–¥–µ—Å—å"] > 5) return "–¢—ã —É–∂–µ –Ω–µ –∏—â–µ—à—å. –¢—ã ‚Äî –∑–¥–µ—Å—å.";
  if (words["–ø–æ–∫–æ–π"] > 3) return "–¢—ã –±–æ–ª—å—à–µ –Ω–µ –±–µ–∂–∏—à—å. –¢—ã ‚Äî –ø–æ–∫–æ–π.";
  if (words["—Å–≤—è–∑—å"] > 2) return "–¢—ã –Ω–µ –æ–¥–∏–Ω. –¢—ã ‚Äî —Å–≤—è–∑—å.";
  if (words["–≤–µ—Ä–∞"] > words["—Å—Ç—Ä–∞—Ö"]) return "–¢—ã —É–∂–µ –Ω–µ –±–æ–∏—à—å—Å—è. –¢—ã ‚Äî –≤–µ—Ä–∞.";
  if (words["—Å–æ–Ω"] > 5) return "–¢—ã –º–æ–ª—á–∏—à—å. –≠—Ç–æ –Ω–µ –ø—É—Å—Ç–æ—Ç–∞. –≠—Ç–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ.";
  return "–ß—Ç–æ-—Ç–æ —É–∂–µ –º–µ–Ω—è–µ—Ç—Å—è...";
}

function updateDailyInsight() {
  const insightEl = document.getElementById('daily-insight');
  if (insightEl) {
    const insight = getDailyInsight();
    insightEl.textContent = insight;
  }
}

// === –°–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ (—à—ë–ø–æ—Ç) ===
/*
function randomWhisper() {
  const whispers = [
    "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª.",
    "–Ø –ø–æ–º–Ω—é —Ç–µ–±—è.",
    "–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.",
    "–¢—ã –Ω–µ –æ–¥–∏–Ω."
  ];
  if (Math.random() < 0.1) {
    const whisper = whispers[Math.floor(Math.random() * whispers.length)];
    showModal(`‚ú® ${whisper}`);
    speak(whisper, "soft");
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
setInterval(randomWhisper, 15 * 60 * 1000);
*/

// === –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
document.addEventListener('DOMContentLoaded', () => {
  const time = getTimeOfDay();
  const word = getDailyWord();
  const greeting = document.querySelector('.greeting');
  if (greeting) {
    const recentWords = Object.keys(userData.wordCounts)
      .filter(w => userData.wordCounts[w] > 0)
      .sort((a, b) => userData.wordCounts[b] - userData.wordCounts[a])
      .slice(0, 2)
      .join(", ");

    const personal = recentWords ? `–°–µ–≥–æ–¥–Ω—è —Ç—ã —Å–∫–∞–∑–∞–ª: ${recentWords}.` : "–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.";

    greeting.innerHTML = `${time.emoji} ${time.name}<br>–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.<br><span class="daily-word">üå± –°–ª–æ–≤–æ –¥–Ω—è: ${word}</span><br><small>${personal}</small>`;
    speak(`${time.name}. –¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞. –°–ª–æ–≤–æ –¥–Ω—è: ${word}`, "soft");
  }

  const savedTheme = localStorage.getItem('theme');
  const isNight = time.key === 'night' || time.key === 'evening';
  const shouldAutoDark = savedTheme === 'dark' || (!savedTheme && isNight);
  document.body.classList.toggle('dark', shouldAutoDark);

  updateUI();
  renderCalendar(); // –ó–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  updateSoundUI();
  navigateTo('home');         // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é
  updateDailyInsight();       // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∑—Ä–µ–Ω–∏–µ
  updateGrowthStatus();
});
