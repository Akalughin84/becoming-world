// app.js
// üå± Becoming ‚Äî —Å–æ–∑–¥–∞–Ω–æ –ê–ª–µ–∫—Å–µ–π –ö–∞–ª—É–≥–∏–Ω, 2025
// –ù–µ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –î–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è.
// –¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.

const userData = {
  wordCounts: {},
  dailyWords: [],
  letters: [],
  dreams: [],
  forgiveness: [],
  silenceMoments: [],
  lastLetter: null
};

function loadData() {
  const saved = localStorage.getItem('becoming_data');
  if (saved) {
    Object.assign(userData, JSON.parse(saved));
  }
}

function saveData() {
  localStorage.setItem('becoming_data', JSON.stringify(userData));
}

loadData();

// === –°–ª–æ–≤–æ –¥–Ω—è ===
function getDailyWord() {
  const themes = {
    default: ["–î—ã—à–∏", "–¢—ã –∑–¥–µ—Å—å", "–≠—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–ò–¥–∏", "–í–µ—Ä—å", "–ë—É–¥—å"]
  };

  const today = new Date().toDateString();
  const usedToday = userData.dailyWords.filter(w => new Date(w.date).toDateString() === today);

  if (usedToday.length > 0) return usedToday[0].word;

  const available = themes.default.filter(w => !usedToday.includes(w));
  const word = available.length > 0 ? available[Math.floor(Math.random() * available.length)] : "–ë—É–¥—å";

  userData.dailyWords.push({ word, date: new Date().toISOString() });
  saveData();
  return word;
}

// === –ü—Ä–æ–∑—Ä–µ–Ω–∏—è ===
function getInsight() {
  const insights = [
    { condition: () => (userData.wordCounts.—Å—Ç—Ä–∞—Ö || 0) > (userData.wordCounts.–≤–µ—Ä–∞ || 0) + 3,
      message: "–¢—ã –±–æ–∏—à—å—Å—è –±–æ–ª—å—à–µ, —á–µ–º –≤–µ—Ä–∏—à—å. –ù–æ —Ç—ã –∏–¥—ë—à—å ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –≤–µ—Ä–∞." },
    { condition: () => (userData.wordCounts.—É—Å—Ç–∞–ª || 0) > 5 && (userData.wordCounts.–∑–¥–µ—Å—å || 0) > 3,
      message: "–¢—ã —É—Å—Ç–∞—ë—à—å, –∑–∞—â–∏—â–∞—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ. –≠—Ç–æ –Ω–µ —Å–ª–∞–±–æ—Å—Ç—å. –≠—Ç–æ –ª—é–±–æ–≤—å." },
    { condition: () => (userData.wordCounts.–Ω–µ_–∑–Ω–∞—é || 0) > 10,
      message: "–¢—ã –Ω–µ –∑–Ω–∞–µ—à—å –ø—É—Ç–∏. –ù–æ —Ç—ã –∑–Ω–∞–µ—à—å, —á–µ–≥–æ —Ö–æ—á–µ—à—å. –≠—Ç–æ–≥–æ —Ö–≤–∞—Ç–∏—Ç." },
    { condition: () => true,
      message: "–¢—ã —É–∂–µ –Ω–µ –∏–¥—ë—à—å —Å–∫–≤–æ–∑—å —Ç—É–º–∞–Ω. –¢—ã ‚Äî —Å–≤–µ—Ç." }
  ];

  for (let rule of insights) {
    if (rule.condition()) return rule.message;
  }
  return "–ü–æ–∫–∞ —Ç–∏—à–∏–Ω–∞‚Ä¶";
}

// === –ü–∏—Å—å–º–æ ===
function writeLetter() {
  const text = prompt("–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ —Å–µ–±–µ —á–µ—Ä–µ–∑ –≥–æ–¥:");
  if (text) {
    userData.letters.push({
      content: text,
      timestamp: new Date().toISOString()
    });
    saveData();
    showModal("‚úâÔ∏è –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
  }
}

// === –ü–∏—Å—å–º–æ –ø—Ä–æ—â–µ–Ω–∏—é ===
function showForgiveness() {
  const recipient = prompt("–ö–æ–º—É —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ—Å—Ç–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–µ–±–µ, –º–∞–º–µ)");
  const content = prompt("–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –ø–∏—Å—å–º–æ:");
  if (content) {
    userData.forgiveness.push({
      recipient: recipient || "—Ç–æ–º—É, –∫—Ç–æ –∂–¥–∞–ª",
      text: content,
      date: new Date().toISOString()
    });
    saveData();
    showModal("‚úÖ –¢—ã —Å–∫–∞–∑–∞–ª. –≠—Ç–æ –≤–∞–∂–Ω–æ.");
  }
}

// === –°–æ–Ω ===
function saveDream() {
  const dream = prompt("–†–∞—Å—Å–∫–∞–∂–∏ —Å–æ–Ω:");
  if (dream) {
    userData.dreams.push({
      text: dream,
      timestamp: new Date().toISOString()
    });
    saveData();
    showModal("üåå –°–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
  }
}

// === –¢–∏—à–∏–Ω–∞ ===
function logSilence() {
  userData.silenceMoments.push(new Date().toISOString());
  saveData();
  showModal("üßò –¢—ã –±—ã–ª. –≠—Ç–æ —É–∂–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ.");
}

// === –ü—Ä–∏—Ä–æ–¥–∞ ===
function playNature(sound) {
  const audio = new Audio(`sounds/${sound}.mp3`);
  audio.loop = true;
  audio.play();
  showModal(`üéß ${sound === 'rain' ? 'üåßÔ∏è –î–æ–∂–¥—å' : 
                    sound === 'fire' ? 'üî• –û–≥–æ–Ω—å' : 
                    sound === 'ocean' ? 'üåä –û–∫–µ–∞–Ω' : 'üå¨Ô∏è –î—ã—Ö–∞–Ω–∏–µ'} –∏–¥—ë—Ç. –ù–∞–∂–º–∏ '–ü–∞—É–∑–∞'.`, "rain");
}

function stopAudio() {
  const audios = document.querySelectorAll('audio');
  audios.forEach(a => a.pause());
  document.querySelector('#modal').style.display = 'none';
}

// === –°–∞–¥ ===
function showGarden() {
  const hereCount = userData.wordCounts.–∑–¥–µ—Å—å || 0;
  const flowers = "üåº".repeat(Math.max(1, Math.floor(hereCount / 3)));
  const message = hereCount < 3 
    ? "–°–µ–º—è –µ—â—ë –≤ –∑–µ–º–ª–µ. –û–Ω–æ —Ä–∞—Å—Ç—ë—Ç."
    : "–¢—ã —É–∂–µ –Ω–µ —Å–∞–¥–∏—à—å. –¢—ã ‚Äî —Å–∞–¥.";
  showModal(`üå∑ –¢–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–∞–¥:\n\n${flowers}\n\n${message}`);
}

// === –ü–æ–≥–æ–¥–∞ ===
function showWeather() {
  const totalWords = Object.values(userData.wordCounts).reduce((a,b) => a+b, 0);
  let weather, symbol, advice;

  if (totalWords > 20) {
    weather = "–ª–µ—Ç–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"; symbol = "‚òÄÔ∏è";
    advice = "–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ —Å–≤–µ—Ç.";
  } else if (totalWords > 10) {
    weather = "–≤–µ—Å–Ω–∞ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è"; symbol = "üå±";
    advice = "–¢—ã —Å–Ω–æ–≤–∞ —Ä–∞—Å—Ç—ë—à—å. –ü—É—Å—Ç—å —Å–ª–æ–≤–∞ –±—É–¥—É—Ç —Å–µ–º–µ–Ω–∞–º–∏.";
  } else if (totalWords > 3) {
    weather = "–æ—Å–µ–Ω—å —Ç–∏—à–∏–Ω—ã"; symbol = "üçÇ";
    advice = "–¢—ã —Å–æ–±–∏—Ä–∞–µ—à—å —Ç–æ, —á—Ç–æ –≤—ã—Ä–æ—Å–ª–æ. –ù–µ —Ç–æ—Ä–æ–ø–∏—Å—å.";
  } else {
    weather = "–∑–∏–º–∞ –∫–æ—Ä–Ω–µ–π"; symbol = "‚ùÑÔ∏è";
    advice = "–¢—ã –Ω–µ —Ä–∞—Å—Ç—ë—à—å. –¢—ã ‚Äî –æ—Å–Ω–æ–≤–∞.";
  }

  showModal(`${symbol} –°–µ–≥–æ–¥–Ω—è –≤ —Ç–µ–±–µ: ${weather}.\n\n${advice}`);
}

// === –ü—Ä–æ–∑—Ä–µ–Ω–∏–µ ===
function showInsight() {
  const insight = getInsight();
  showModal("‚ú® " + insight);
}

// === –°–ª–æ–≤–∞—Ä—å —Å–µ—Ä–¥—Ü–∞ ===
function showWords() {
  const words = Object.keys(userData.wordCounts)
    .map(w => `${w} ‚Ä¢ (${userData.wordCounts[w]})`)
    .join('\n') || "–ü–æ–∫–∞ –ø—É—Å—Ç–æ";
  showModal(`üìñ –°–ª–æ–≤–∞—Ä—å —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–¥—Ü–∞:\n\n${words}`);
}

// === –ö–∞—Ä—Ç–∞ —Ä–æ—Å—Ç–∞ ===
function showMap() {
  const axes = [
    { neg: "–Ω–µ –∑–Ω–∞—é", pos: "–∑–¥–µ—Å—å", label: "–ì–ª—É–±–∏–Ω–∞" },
    { neg: "–æ–¥–∏–Ω", pos: "—Å–≤—è–∑—å", label: "–°–≤—è–∑—å" },
    { neg: "—É—Å—Ç–∞–ª", pos: "–ø–æ–∫–æ–π", label: "–≠–Ω–µ—Ä–≥–∏—è" },
    { neg: "—Å—Ç—Ä–∞—Ö", pos: "–≤–µ—Ä–∞", label: "–°–º–µ–ª–æ—Å—Ç—å" }
  ];

  let map = "üó∫ –í–∏–∑—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Ä–æ—Å—Ç–∞\n\n";
  axes.forEach(ax => {
    const neg = userData.wordCounts[ax.neg] || 0;
    const pos = userData.wordCounts[pos] || 0;
    const diff = pos - neg;
    const bar = "üåë".repeat(20 - Math.min(20, Math.max(0, diff))) + "üå±".repeat(Math.min(20, Math.max(0, diff)));
    map += `${ax.neg.toUpperCase()} ${bar} ${ax.pos.toUpperCase()} (${diff:+d})\n`;
  });

  showModal(map);
}

// === –î–æ–Ω–∞—Ç—ã ===
function showDonate() {
  const modal = document.createElement('div');
  modal.style.cssText = `
    position: fixed; top: 0; left: 0; width: 100%; height: 100%;
    background: rgba(0,0,0,0.9); color: #aaa; display: flex;
    align-items: center; justify-content: center; z-index: 1000;
    font-family: 'Segoe UI', sans-serif;
  `;
  modal.innerHTML = `
    <div style="background: #111; padding: 30px; border-radius: 12px; max-width: 400px; text-align: center;">
      <h3>üå± –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å Becoming</h3>
      <p>
        –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–≥–ª–æ —Ç–µ–±–µ –±—ã—Ç—å –∑–¥–µ—Å—å ‚Äî  
        —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ.
      </p>
      <p style="font-size: 0.9em; color: #777;">
        –≠—Ç–æ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ.  
        –ù–µ –æ–±—è–∑–∞–Ω. –ü—Ä–æ—Å—Ç–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å.
      </p>
      <div style="margin: 20px 0;">
        <a href="https://boosty.to/becoming" target="_blank" style="color: #4CAF50; text-decoration: none;">
          üíö –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Boosty
        </a><br><br>
        <a href="https://ko-fi.com/becoming5036" target="_blank" style="color: #00A0C6; text-decoration: none;">
          üíô –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ Ko-fi
        </a>
      </div>
      <button onclick="this.closest('div').remove()" 
              style="background: #333; border: none; padding: 8px 16px; border-radius: 6px; color: #ccc;">
        –ó–∞–∫—Ä—ã—Ç—å
      </button>
    </div>
  `;
  document.body.appendChild(modal);
}

// === –ú–æ–¥–∞–ª–∫–∞ ===
function showModal(message, type = null) {
  const modalBody = document.getElementById('modal-body');
  modalBody.innerHTML = `<p>${message.replace(/\n/g, '<br>')}</p>`;
  
  if (type === "rain") {
    modalBody.innerHTML += `<button onclick="stopAudio()">‚è∏Ô∏è –ü–∞—É–∑–∞</button>`;
  } else {
    modalBody.innerHTML += `<button onclick="closeModal()">–ó–∞–∫—Ä—ã—Ç—å</button>`;
  }
  
  document.getElementById('modal').style.display = 'flex';
}

function closeModal() {
  document.getElementById('modal').style.display = 'none';
}

// === –ó–∞–ø—É—Å–∫ ===
window.onload = () => {
  const word = getDailyWord();
  document.querySelector('.greeting').textContent = `–¢—ã –∑–¥–µ—Å—å. –≠—Ç–æ —É–∂–µ –ø–æ–±–µ–¥–∞.\nüå± –°–ª–æ–≤–æ –¥–Ω—è: ${word}`;
};

// === PWA ===
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js');
  });
}
